{"files":{"core/animal.js":{"language":"javascript","mutants":[{"id":"1","mutatorName":"BlockStatement","replacement":"{}","statusReason":"expected undefined to equal 'Generic animal sound'","status":"Killed","static":false,"testsCompleted":1,"killedBy":["0"],"coveredBy":["0"],"location":{"end":{"column":4,"line":8},"start":{"column":15,"line":6}}},{"id":"2","mutatorName":"StringLiteral","replacement":"\"\"","statusReason":"expected '' to equal 'Generic animal sound'","status":"Killed","static":false,"testsCompleted":1,"killedBy":["0"],"coveredBy":["0"],"location":{"end":{"column":34,"line":7},"start":{"column":12,"line":7}}},{"id":"0","mutatorName":"BlockStatement","replacement":"{}","statusReason":"expected 'I am a Tabby cat named undefined' to equal 'I am a Tabby cat named Whiskers'","status":"Killed","static":false,"testsCompleted":2,"killedBy":["1"],"coveredBy":["0","1"],"location":{"end":{"column":4,"line":4},"start":{"column":21,"line":2}}}],"source":"class Animal {\n  constructor(name) {\n    this.name = name;\n  }\n\n  makeSound() {\n    return \"Generic animal sound\";\n  }\n}\n\nmodule.exports = Animal;"},"core/auth.js":{"language":"javascript","mutants":[{"id":"3","mutatorName":"BlockStatement","replacement":"{}","statusReason":"Cannot read properties of undefined (reading 'some')","status":"Killed","static":false,"testsCompleted":1,"killedBy":["2"],"coveredBy":["2","3","4","5","6","7","8","9","10","11","12","29","30","31","32","33"],"location":{"end":{"column":6,"line":7},"start":{"column":19,"line":4}}},{"id":"4","mutatorName":"ArrayDeclaration","replacement":"[\"Stryker was here\"]","statusReason":"Expected values to be strictly deep-equal:\n+ actual - expected ... Lines skipped\n\n  [\n+   'Stryker was here',\n    {\n...\n      username: 'user1'\n    }\n  ]","status":"Killed","static":false,"testsCompleted":1,"killedBy":["2"],"coveredBy":["2","3","4","5","6","7","8","9","10","11","12","29","30","31","32","33"],"location":{"end":{"column":22,"line":5},"start":{"column":20,"line":5}}},{"id":"5","mutatorName":"BlockStatement","replacement":"{}","statusReason":"Expected values to be strictly deep-equal:\n+ actual - expected\n\n+ []\n- [\n-   {\n-     password: 'password123',\n-     username: 'user1'\n-   }\n- ]","status":"Killed","static":false,"testsCompleted":1,"killedBy":["2"],"coveredBy":["2","3","4","5","7","10","11","12","29","30","32","33"],"location":{"end":{"column":6,"line":15},"start":{"column":38,"line":9}}},{"id":"6","mutatorName":"ConditionalExpression","replacement":"true","statusReason":"Username already exists","status":"Killed","static":false,"testsCompleted":1,"killedBy":["2"],"coveredBy":["2","3","4","5","7","10","11","12","29","30","32","33"],"location":{"end":{"column":62,"line":10},"start":{"column":11,"line":10}}},{"id":"7","mutatorName":"ConditionalExpression","replacement":"false","statusReason":"'Expected an error to be thrown for duplicate username' == 'Username already exists'","status":"Killed","static":false,"testsCompleted":2,"killedBy":["3"],"coveredBy":["2","3","4","5","7","10","11","12","29","30","32","33"],"location":{"end":{"column":62,"line":10},"start":{"column":11,"line":10}}},{"id":"8","mutatorName":"MethodExpression","replacement":"this.users.every(user => user.username === username)","statusReason":"Username already exists","status":"Killed","static":false,"testsCompleted":1,"killedBy":["2"],"coveredBy":["2","3","4","5","7","10","11","12","29","30","32","33"],"location":{"end":{"column":62,"line":10},"start":{"column":11,"line":10}}},{"id":"9","mutatorName":"ArrowFunction","replacement":"() => undefined","statusReason":"'Expected an error to be thrown for duplicate username' == 'Username already exists'","status":"Killed","static":false,"testsCompleted":2,"killedBy":["3"],"coveredBy":["2","3","4","5","7","10","11","12","29","30","32","33"],"location":{"end":{"column":61,"line":10},"start":{"column":27,"line":10}}},{"id":"10","mutatorName":"ConditionalExpression","replacement":"true","statusReason":"Username already exists","status":"Killed","static":false,"testsCompleted":2,"killedBy":["30"],"coveredBy":["3","30"],"location":{"end":{"column":61,"line":10},"start":{"column":35,"line":10}}},{"id":"11","mutatorName":"ConditionalExpression","replacement":"false","statusReason":"'Expected an error to be thrown for duplicate username' == 'Username already exists'","status":"Killed","static":false,"testsCompleted":1,"killedBy":["3"],"coveredBy":["3","30"],"location":{"end":{"column":61,"line":10},"start":{"column":35,"line":10}}},{"id":"12","mutatorName":"EqualityOperator","replacement":"user.username !== username","statusReason":"'Expected an error to be thrown for duplicate username' == 'Username already exists'","status":"Killed","static":false,"testsCompleted":1,"killedBy":["3"],"coveredBy":["3","30"],"location":{"end":{"column":61,"line":10},"start":{"column":35,"line":10}}},{"id":"13","mutatorName":"BlockStatement","replacement":"{}","statusReason":"'Expected an error to be thrown for duplicate username' == 'Username already exists'","status":"Killed","static":false,"testsCompleted":1,"killedBy":["3"],"coveredBy":["3"],"location":{"end":{"column":8,"line":12},"start":{"column":64,"line":10}}},{"id":"14","mutatorName":"StringLiteral","replacement":"\"\"","statusReason":"'' == 'Username already exists'","status":"Killed","static":false,"testsCompleted":1,"killedBy":["3"],"coveredBy":["3"],"location":{"end":{"column":50,"line":11},"start":{"column":25,"line":11}}},{"id":"15","mutatorName":"ObjectLiteral","replacement":"{}","statusReason":"Expected values to be strictly deep-equal:\n+ actual - expected\n\n  [\n+   {}\n-   {\n-     password: 'password123',\n-     username: 'user1'\n-   }\n  ]","status":"Killed","static":false,"testsCompleted":1,"killedBy":["2"],"coveredBy":["2","3","4","5","7","10","11","12","29","30","32","33"],"location":{"end":{"column":45,"line":14},"start":{"column":23,"line":14}}},{"id":"16","mutatorName":"BlockStatement","replacement":"{}","statusReason":"undefined == true","status":"Killed","static":false,"testsCompleted":1,"killedBy":["4"],"coveredBy":["4","5","6","7","10","11","12","29","30","33"],"location":{"end":{"column":6,"line":26},"start":{"column":35,"line":17}}},{"id":"17","mutatorName":"ArrowFunction","replacement":"() => undefined","statusReason":"false == true","status":"Killed","static":false,"testsCompleted":1,"killedBy":["4"],"coveredBy":["4","5","6","7","10","11","12","29","30","33"],"location":{"end":{"column":70,"line":18},"start":{"column":36,"line":18}}},{"id":"18","mutatorName":"ConditionalExpression","replacement":"true","statusReason":"true == false","status":"Killed","static":false,"testsCompleted":5,"killedBy":["11"],"coveredBy":["4","5","7","10","11","12","29","30","33"],"location":{"end":{"column":70,"line":18},"start":{"column":44,"line":18}}},{"id":"19","mutatorName":"ConditionalExpression","replacement":"false","statusReason":"false == true","status":"Killed","static":false,"testsCompleted":1,"killedBy":["4"],"coveredBy":["4","5","7","10","11","12","29","30","33"],"location":{"end":{"column":70,"line":18},"start":{"column":44,"line":18}}},{"id":"20","mutatorName":"EqualityOperator","replacement":"user.username !== username","statusReason":"false == true","status":"Killed","static":false,"testsCompleted":1,"killedBy":["4"],"coveredBy":["4","5","7","10","11","12","29","30","33"],"location":{"end":{"column":70,"line":18},"start":{"column":44,"line":18}}},{"id":"21","mutatorName":"ConditionalExpression","replacement":"true","statusReason":"true == false","status":"Killed","static":false,"testsCompleted":2,"killedBy":["5"],"coveredBy":["4","5","6","7","10","11","12","29","30","33"],"location":{"end":{"column":45,"line":20},"start":{"column":11,"line":20}}},{"id":"22","mutatorName":"ConditionalExpression","replacement":"false","statusReason":"false == true","status":"Killed","static":false,"testsCompleted":1,"killedBy":["4"],"coveredBy":["4","5","6","7","10","11","12","29","30","33"],"location":{"end":{"column":45,"line":20},"start":{"column":11,"line":20}}},{"id":"23","mutatorName":"LogicalOperator","replacement":"user || user.password === password","statusReason":"true == false","status":"Killed","static":false,"testsCompleted":2,"killedBy":["5"],"coveredBy":["4","5","6","7","10","11","12","29","30","33"],"location":{"end":{"column":45,"line":20},"start":{"column":11,"line":20}}},{"id":"24","mutatorName":"ConditionalExpression","replacement":"true","statusReason":"true == false","status":"Killed","static":false,"testsCompleted":2,"killedBy":["5"],"coveredBy":["4","5","7","10","12","29","30","33"],"location":{"end":{"column":45,"line":20},"start":{"column":19,"line":20}}},{"id":"25","mutatorName":"EqualityOperator","replacement":"user.password !== password","statusReason":"false == true","status":"Killed","static":false,"testsCompleted":1,"killedBy":["4"],"coveredBy":["4","5","7","10","12","29","30","33"],"location":{"end":{"column":45,"line":20},"start":{"column":19,"line":20}}},{"id":"26","mutatorName":"BlockStatement","replacement":"{}","statusReason":"false == true","status":"Killed","static":false,"testsCompleted":1,"killedBy":["4"],"coveredBy":["4","7","29","30"],"location":{"end":{"column":8,"line":23},"start":{"column":47,"line":20}}},{"id":"27","mutatorName":"BooleanLiteral","replacement":"false","statusReason":"false == true","status":"Killed","static":false,"testsCompleted":1,"killedBy":["4"],"coveredBy":["4","7","29","30"],"location":{"end":{"column":20,"line":22},"start":{"column":16,"line":22}}},{"id":"28","mutatorName":"BooleanLiteral","replacement":"true","statusReason":"true == false","status":"Killed","static":false,"testsCompleted":1,"killedBy":["5"],"coveredBy":["5","6","10","11","12","33"],"location":{"end":{"column":19,"line":25},"start":{"column":14,"line":25}}},{"id":"29","mutatorName":"BlockStatement","replacement":"{}","statusReason":"true == false","status":"Killed","static":false,"testsCompleted":1,"killedBy":["7"],"coveredBy":["7","9","30"],"location":{"end":{"column":6,"line":30},"start":{"column":18,"line":28}}},{"id":"30","mutatorName":"BlockStatement","replacement":"{}","statusReason":"undefined == true","status":"Killed","static":false,"testsCompleted":1,"killedBy":["4"],"coveredBy":["4","5","6","7","8","9","10","11","12","29","30","31","32","33"],"location":{"end":{"column":6,"line":34},"start":{"column":23,"line":32}}},{"id":"32","mutatorName":"ConditionalExpression","replacement":"false","statusReason":"false == true","status":"Killed","static":false,"testsCompleted":1,"killedBy":["4"],"coveredBy":["4","5","6","7","8","9","10","11","12","29","30","31","32","33"],"location":{"end":{"column":39,"line":33},"start":{"column":14,"line":33}}},{"id":"33","mutatorName":"EqualityOperator","replacement":"this.currentUser === null","statusReason":"false == true","status":"Killed","static":false,"testsCompleted":1,"killedBy":["4"],"coveredBy":["4","5","6","7","8","9","10","11","12","29","30","31","32","33"],"location":{"end":{"column":39,"line":33},"start":{"column":14,"line":33}}},{"id":"31","mutatorName":"ConditionalExpression","replacement":"true","statusReason":"true == false","status":"Killed","static":false,"testsCompleted":2,"killedBy":["5"],"coveredBy":["4","5","6","7","8","9","10","11","12","29","30","31","32","33"],"location":{"end":{"column":39,"line":33},"start":{"column":14,"line":33}}}],"source":"// auth.js\n\nclass Auth {\n    constructor() {\n      this.users = [];\n      this.currentUser = null;\n    }\n  \n    registerUser(username, password) {\n      if (this.users.some(user => user.username === username)) {\n        throw new Error('Username already exists');\n      }\n  \n      this.users.push({ username, password });\n    }\n  \n    loginUser(username, password) {\n      const user = this.users.find(user => user.username === username);\n  \n      if (user && user.password === password) {\n        this.currentUser = username;\n        return true;\n      }\n  \n      return false;\n    }\n  \n    logoutUser() {\n      this.currentUser = null;\n    }\n  \n    isAuthenticated() {\n      return this.currentUser !== null;\n    }\n  }\n  \n  module.exports = Auth;\n  "},"core/calculator.js":{"language":"javascript","mutants":[{"id":"35","mutatorName":"BlockStatement","replacement":"{}","statusReason":"undefined == 8","status":"Killed","static":false,"testsCompleted":1,"killedBy":["13"],"coveredBy":["13","21","34","35"],"location":{"end":{"column":6,"line":6},"start":{"column":26,"line":4}}},{"id":"36","mutatorName":"ArithmeticOperator","replacement":"a - b","statusReason":"-2 == 8","status":"Killed","static":false,"testsCompleted":1,"killedBy":["13"],"coveredBy":["13","21","34","35"],"location":{"end":{"column":19,"line":5},"start":{"column":14,"line":5}}},{"id":"38","mutatorName":"ArithmeticOperator","replacement":"a + b","statusReason":"11 == 5","status":"Killed","static":false,"testsCompleted":1,"killedBy":["14"],"coveredBy":["14","22","34","35"],"location":{"end":{"column":19,"line":9},"start":{"column":14,"line":9}}},{"id":"37","mutatorName":"BlockStatement","replacement":"{}","statusReason":"undefined == 5","status":"Killed","static":false,"testsCompleted":1,"killedBy":["14"],"coveredBy":["14","22","34","35"],"location":{"end":{"column":6,"line":10},"start":{"column":31,"line":8}}},{"id":"40","mutatorName":"ArithmeticOperator","replacement":"a / b","statusReason":"0.5 == 8","status":"Killed","static":false,"testsCompleted":1,"killedBy":["15"],"coveredBy":["15","34","35"],"location":{"end":{"column":19,"line":13},"start":{"column":14,"line":13}}},{"id":"39","mutatorName":"BlockStatement","replacement":"{}","statusReason":"undefined == 8","status":"Killed","static":false,"testsCompleted":1,"killedBy":["15"],"coveredBy":["15","34","35"],"location":{"end":{"column":6,"line":14},"start":{"column":31,"line":12}}},{"id":"41","mutatorName":"BlockStatement","replacement":"{}","statusReason":"undefined == 4","status":"Killed","static":false,"testsCompleted":1,"killedBy":["16"],"coveredBy":["16","17"],"location":{"end":{"column":6,"line":22},"start":{"column":29,"line":16}}},{"id":"42","mutatorName":"ConditionalExpression","replacement":"true","statusReason":"Missing expected exception.","status":"Killed","static":false,"testsCompleted":2,"killedBy":["17"],"coveredBy":["16","17"],"location":{"end":{"column":18,"line":17},"start":{"column":11,"line":17}}},{"id":"44","mutatorName":"EqualityOperator","replacement":"b === 0","statusReason":"Cannot divide by zero","status":"Killed","static":false,"testsCompleted":1,"killedBy":["16"],"coveredBy":["16","17"],"location":{"end":{"column":18,"line":17},"start":{"column":11,"line":17}}},{"id":"43","mutatorName":"ConditionalExpression","replacement":"false","statusReason":"Cannot divide by zero","status":"Killed","static":false,"testsCompleted":1,"killedBy":["16"],"coveredBy":["16","17"],"location":{"end":{"column":18,"line":17},"start":{"column":11,"line":17}}},{"id":"46","mutatorName":"ArithmeticOperator","replacement":"a * b","statusReason":"16 == 4","status":"Killed","static":false,"testsCompleted":1,"killedBy":["16"],"coveredBy":["16"],"location":{"end":{"column":21,"line":18},"start":{"column":16,"line":18}}},{"id":"45","mutatorName":"BlockStatement","replacement":"{}","statusReason":"undefined == 4","status":"Killed","static":false,"testsCompleted":1,"killedBy":["16"],"coveredBy":["16"],"location":{"end":{"column":8,"line":19},"start":{"column":20,"line":17}}},{"id":"48","mutatorName":"StringLiteral","replacement":"\"\"","statusReason":"The input did not match the regular expression /Cannot divide by zero/. Input:\n\n'Error'\n","status":"Killed","static":false,"testsCompleted":1,"killedBy":["17"],"coveredBy":["17"],"location":{"end":{"column":48,"line":20},"start":{"column":25,"line":20}}},{"id":"49","mutatorName":"BlockStatement","replacement":"{}","statusReason":"undefined == 16","status":"Killed","static":false,"testsCompleted":1,"killedBy":["18"],"coveredBy":["18","34","35"],"location":{"end":{"column":6,"line":26},"start":{"column":26,"line":24}}},{"id":"47","mutatorName":"BlockStatement","replacement":"{}","statusReason":"Missing expected exception.","status":"Killed","static":false,"testsCompleted":1,"killedBy":["17"],"coveredBy":["17"],"location":{"end":{"column":8,"line":21},"start":{"column":14,"line":19}}},{"id":"50","mutatorName":"ArithmeticOperator","replacement":"a / a","statusReason":"1 == 16","status":"Killed","static":false,"testsCompleted":1,"killedBy":["18"],"coveredBy":["18","34","35"],"location":{"end":{"column":19,"line":25},"start":{"column":14,"line":25}}},{"id":"51","mutatorName":"BlockStatement","replacement":"{}","statusReason":"undefined == 8","status":"Killed","static":false,"testsCompleted":1,"killedBy":["19"],"coveredBy":["19","20"],"location":{"end":{"column":6,"line":30},"start":{"column":38,"line":28}}},{"id":"52","mutatorName":"BlockStatement","replacement":"{}","statusReason":"undefined == 256","status":"Killed","static":false,"testsCompleted":1,"killedBy":["34"],"coveredBy":["34","35"],"location":{"end":{"column":6,"line":38},"start":{"column":54,"line":33}}},{"id":"34","mutatorName":"ObjectLiteral","replacement":"{}","statusReason":"calculator.add is not a function","status":"Killed","static":true,"testsCompleted":14,"killedBy":["13"],"coveredBy":[],"location":{"end":{"column":4,"line":39},"start":{"column":18,"line":3}}}],"source":"// calculator.js\n\nmodule.exports = {\n    add: function (a, b) {\n      return a + b;\n    },\n  \n    subtract: function (a, b) {\n      return a - b;\n    },\n  \n    multiply: function (a, b) {\n      return a * b;\n    },\n  \n    divide: function (a, b) {\n      if (b !== 0) {\n        return a / b;\n      } else {\n        throw new Error(\"Cannot divide by zero\");\n      }\n    },\n  \n    square: function (a) {\n      return a * a;\n    },\n  \n    power: function (base, exponent) {\n      return Math.pow(base, exponent);\n    },\n  \n    // A sample function for integration testing\n    performMultipleOperations: function (a, b, c, d) {\n      const sum = this.add(a, b);\n      const difference = this.subtract(c, d);\n      const product = this.multiply(sum, difference);\n      return this.square(product);\n    },\n  };\n  "},"core/cart.js":{"language":"javascript","mutants":[{"id":"54","mutatorName":"ArrayDeclaration","replacement":"[\"Stryker was here\"]","statusReason":"Expected values to be strictly deep-equal:\n+ actual - expected ... Lines skipped\n\n  [\n+   'Stryker was here',\n    {\n...\n      price: 30\n    }\n  ]","status":"Killed","static":false,"testsCompleted":1,"killedBy":["23"],"coveredBy":["23","24","25","26","27","28","36","37"],"location":{"end":{"column":22,"line":5},"start":{"column":20,"line":5}}},{"id":"53","mutatorName":"BlockStatement","replacement":"{}","statusReason":"Cannot read properties of undefined (reading 'push')","status":"Killed","static":false,"testsCompleted":1,"killedBy":["23"],"coveredBy":["23","24","25","26","27","28","36","37"],"location":{"end":{"column":6,"line":6},"start":{"column":19,"line":4}}},{"id":"55","mutatorName":"BlockStatement","replacement":"{}","statusReason":"Expected values to be strictly deep-equal:\n+ actual - expected\n\n+ []\n- [\n-   {\n-     name: 'Product 2',\n-     price: 30\n-   }\n- ]","status":"Killed","static":false,"testsCompleted":1,"killedBy":["23"],"coveredBy":["23","24","25","26","27","28","36"],"location":{"end":{"column":6,"line":10},"start":{"column":19,"line":8}}},{"id":"57","mutatorName":"ConditionalExpression","replacement":"true","statusReason":"Expected values to be strictly deep-equal:\n+ actual - expected\n\n+ []\n- [\n-   {\n-     name: 'Product 1',\n-     price: 20\n-   }\n- ]","status":"Killed","static":false,"testsCompleted":3,"killedBy":["25"],"coveredBy":["23","24","25","26","27","28","36"],"location":{"end":{"column":23,"line":14},"start":{"column":11,"line":14}}},{"id":"56","mutatorName":"BlockStatement","replacement":"{}","statusReason":"Expected values to be strictly deep-equal:\n+ actual - expected ... Lines skipped\n\n  [\n+   {\n+     name: 'Product 1',\n+     price: 20\n+   },\n    {\n...\n      price: 30\n    }\n  ]","status":"Killed","static":false,"testsCompleted":1,"killedBy":["23"],"coveredBy":["23","24","25","26","27","28","36"],"location":{"end":{"column":6,"line":17},"start":{"column":22,"line":12}}},{"id":"58","mutatorName":"ConditionalExpression","replacement":"false","statusReason":"Expected values to be strictly deep-equal:\n+ actual - expected ... Lines skipped\n\n  [\n+   {\n+     name: 'Product 1',\n+     price: 20\n+   },\n    {\n...\n      price: 30\n    }\n  ]","status":"Killed","static":false,"testsCompleted":1,"killedBy":["23"],"coveredBy":["23","24","25","26","27","28","36"],"location":{"end":{"column":23,"line":14},"start":{"column":11,"line":14}}},{"id":"59","mutatorName":"EqualityOperator","replacement":"index === -1","statusReason":"Expected values to be strictly deep-equal:\n+ actual - expected ... Lines skipped\n\n  [\n+   {\n+     name: 'Product 1',\n+     price: 20\n+   },\n    {\n...\n      price: 30\n    }\n  ]","status":"Killed","static":false,"testsCompleted":1,"killedBy":["23"],"coveredBy":["23","24","25","26","27","28","36"],"location":{"end":{"column":23,"line":14},"start":{"column":11,"line":14}}},{"id":"61","mutatorName":"BlockStatement","replacement":"{}","statusReason":"Expected values to be strictly deep-equal:\n+ actual - expected ... Lines skipped\n\n  [\n+   {\n+     name: 'Product 1',\n+     price: 20\n+   },\n    {\n...\n      price: 30\n    }\n  ]","status":"Killed","static":false,"testsCompleted":1,"killedBy":["23"],"coveredBy":["23","24","26","27","28","36"],"location":{"end":{"column":8,"line":16},"start":{"column":25,"line":14}}},{"id":"62","mutatorName":"BlockStatement","replacement":"{}","statusReason":"Expected values to be strictly deep-equal:\n+ actual - expected ... Lines skipped\n\n  {\n    items: [\n...\n      }\n    ],\n+   total: undefined\n-   total: 30\n  }","status":"Killed","static":false,"testsCompleted":1,"killedBy":["36"],"coveredBy":["36","37"],"location":{"end":{"column":6,"line":21},"start":{"column":22,"line":19}}},{"id":"63","mutatorName":"ArrowFunction","replacement":"() => undefined","statusReason":"Expected values to be strictly deep-equal:\n+ actual - expected ... Lines skipped\n\n  {\n    items: [\n...\n      }\n    ],\n+   total: undefined\n-   total: 30\n  }","status":"Killed","static":false,"testsCompleted":1,"killedBy":["36"],"coveredBy":["36","37"],"location":{"end":{"column":67,"line":20},"start":{"column":32,"line":20}}},{"id":"60","mutatorName":"UnaryOperator","replacement":"+1","statusReason":"Expected values to be strictly deep-equal:\n+ actual - expected\n\n+ []\n- [\n-   {\n-     name: 'Product 1',\n-     price: 20\n-   }\n- ]","status":"Killed","static":false,"testsCompleted":3,"killedBy":["25"],"coveredBy":["23","24","25","26","27","28","36"],"location":{"end":{"column":23,"line":14},"start":{"column":21,"line":14}}},{"id":"64","mutatorName":"ArithmeticOperator","replacement":"total - item.price","statusReason":"Expected values to be strictly deep-equal:\n+ actual - expected ... Lines skipped\n\n  {\n    items: [\n...\n      }\n    ],\n+   total: -30\n-   total: 30\n  }","status":"Killed","static":false,"testsCompleted":1,"killedBy":["36"],"coveredBy":["36"],"location":{"end":{"column":67,"line":20},"start":{"column":49,"line":20}}}],"source":"// cart.js\n\nclass ShoppingCart {\n    constructor() {\n      this.items = [];\n    }\n  \n    addItem(item) {\n      this.items.push(item);\n    }\n  \n    removeItem(item) {\n      const index = this.items.indexOf(item);\n      if (index !== -1) {\n        this.items.splice(index, 1);\n      }\n    }\n  \n    calculateTotal() {\n      return this.items.reduce((total, item) => total + item.price, 0);\n    }\n  }\n  \n  module.exports = ShoppingCart;\n  "},"core/cat.js":{"language":"javascript","mutants":[{"id":"65","mutatorName":"BlockStatement","replacement":"{}","statusReason":"Must call super constructor in derived class before accessing 'this' or returning from derived constructor","status":"Killed","static":false,"testsCompleted":1,"killedBy":["1"],"coveredBy":["1"],"location":{"end":{"column":4,"line":7},"start":{"column":28,"line":4}}},{"id":"67","mutatorName":"StringLiteral","replacement":"\"\"","statusReason":"expected '' to equal 'Meow'","status":"Killed","static":false,"testsCompleted":1,"killedBy":["1"],"coveredBy":["1"],"location":{"end":{"column":18,"line":10},"start":{"column":12,"line":10}}},{"id":"66","mutatorName":"BlockStatement","replacement":"{}","statusReason":"expected undefined to equal 'Meow'","status":"Killed","static":false,"testsCompleted":1,"killedBy":["1"],"coveredBy":["1"],"location":{"end":{"column":4,"line":11},"start":{"column":15,"line":9}}},{"id":"68","mutatorName":"BlockStatement","replacement":"{}","statusReason":"expected undefined to equal 'I am a Tabby cat named Whiskers'","status":"Killed","static":false,"testsCompleted":1,"killedBy":["1"],"coveredBy":["1"],"location":{"end":{"column":4,"line":15},"start":{"column":15,"line":13}}},{"id":"69","mutatorName":"StringLiteral","replacement":"``","statusReason":"expected '' to equal 'I am a Tabby cat named Whiskers'","status":"Killed","static":false,"testsCompleted":1,"killedBy":["1"],"coveredBy":["1"],"location":{"end":{"column":57,"line":14},"start":{"column":12,"line":14}}}],"source":"const Animal = require(\"./animal\");\n\nclass Cat extends Animal {\n  constructor(name, color) {\n    super(name);\n    this.color = color;\n  }\n\n  makeSound() {\n    return \"Meow\";\n  }\n\n  introduce() {\n    return `I am a ${this.color} cat named ${this.name}`;\n  }\n}\n\nmodule.exports = Cat;\n"},"core/stringOperations.js":{"language":"javascript","mutants":[{"id":"72","mutatorName":"ArithmeticOperator","replacement":"str1 - str2","statusReason":"Expected values to be strictly deep-equal:\n+ actual - expected\n\n  {\n+   concatenated: NaN,\n-   concatenated: 'HelloWorld',\n    length: 10,\n    uppercase: 'INTEGRATION'\n  }","status":"Killed","static":false,"testsCompleted":1,"killedBy":["38"],"coveredBy":["38","39","42","45"],"location":{"end":{"column":49,"line":6},"start":{"column":38,"line":6}}},{"id":"75","mutatorName":"MethodExpression","replacement":"str.toLowerCase()","statusReason":"Expected values to be strictly deep-equal:\n+ actual - expected\n\n  {\n    concatenated: 'HelloWorld',\n    length: 10,\n+   uppercase: 'integration'\n-   uppercase: 'INTEGRATION'\n  }","status":"Killed","static":false,"testsCompleted":1,"killedBy":["38"],"coveredBy":["38","39","44","47"],"location":{"end":{"column":48,"line":12},"start":{"column":31,"line":12}}},{"id":"71","mutatorName":"ArrowFunction","replacement":"() => undefined","statusReason":"Expected values to be strictly deep-equal:\n+ actual - expected\n\n  {\n+   concatenated: undefined,\n-   concatenated: 'HelloWorld',\n    length: 10,\n    uppercase: 'INTEGRATION'\n  }","status":"Killed","static":true,"testsCompleted":39,"killedBy":["38"],"coveredBy":[],"location":{"end":{"column":49,"line":6},"start":{"column":22,"line":6}}},{"id":"73","mutatorName":"ArrowFunction","replacement":"() => undefined","statusReason":"Expected values to be strictly deep-equal:\n+ actual - expected\n\n  {\n    concatenated: 'HelloWorld',\n+   length: undefined,\n-   length: 10,\n    uppercase: 'INTEGRATION'\n  }","status":"Killed","static":true,"testsCompleted":39,"killedBy":["38"],"coveredBy":[],"location":{"end":{"column":38,"line":9},"start":{"column":19,"line":9}}},{"id":"70","mutatorName":"ObjectLiteral","replacement":"{}","statusReason":"stringOperations.concatenateStrings is not a function","status":"Killed","static":true,"testsCompleted":39,"killedBy":["38"],"coveredBy":[],"location":{"end":{"column":2,"line":14},"start":{"column":18,"line":3}}},{"id":"74","mutatorName":"ArrowFunction","replacement":"() => undefined","statusReason":"Expected values to be strictly deep-equal:\n+ actual - expected\n\n  {\n    concatenated: 'HelloWorld',\n    length: 10,\n+   uppercase: undefined\n-   uppercase: 'INTEGRATION'\n  }","status":"Killed","static":true,"testsCompleted":39,"killedBy":["38"],"coveredBy":[],"location":{"end":{"column":48,"line":12},"start":{"column":22,"line":12}}}],"source":"// stringOperations.js\n\nmodule.exports = {\n\n // Function to concatenate two strings\n concatenateStrings: (str1, str2) => str1 + str2,\n\n // Function to get the length of a string\n getStringLength: (str) => str.length,\n\n // Function to convert a string to uppercase\n convertToUppercase: (str) => str.toUpperCase(),\n  \n};\n  "},"core/weather.js":{"language":"javascript","mutants":[{"id":"76","mutatorName":"BlockStatement","replacement":"{}","statusReason":"Cannot set properties of undefined (setting 'Tokyo')","status":"Killed","static":false,"testsCompleted":1,"killedBy":["40"],"coveredBy":["40","41","48","49","50","51","52"],"location":{"end":{"column":4,"line":7},"start":{"column":17,"line":4}}},{"id":"77","mutatorName":"BlockStatement","replacement":"{}","statusReason":"null == 22","status":"Killed","static":false,"testsCompleted":1,"killedBy":["40"],"coveredBy":["40","41","49","50","51","52"],"location":{"end":{"column":4,"line":18},"start":{"column":55,"line":9}}},{"id":"79","mutatorName":"BooleanLiteral","replacement":"this.temperatureHistory[location]","statusReason":"Cannot read properties of undefined (reading 'push')","status":"Killed","static":false,"testsCompleted":1,"killedBy":["40"],"coveredBy":["40","41","49","50","51","52"],"location":{"end":{"column":43,"line":14},"start":{"column":9,"line":14}}},{"id":"78","mutatorName":"ObjectLiteral","replacement":"{}","statusReason":"undefined == 22","status":"Killed","static":false,"testsCompleted":1,"killedBy":["40"],"coveredBy":["40","41","49","50","51","52"],"location":{"end":{"column":60,"line":11},"start":{"column":34,"line":11}}},{"id":"81","mutatorName":"ConditionalExpression","replacement":"false","statusReason":"Cannot read properties of undefined (reading 'push')","status":"Killed","static":false,"testsCompleted":1,"killedBy":["40"],"coveredBy":["40","41","49","50","51","52"],"location":{"end":{"column":43,"line":14},"start":{"column":9,"line":14}}},{"id":"82","mutatorName":"BlockStatement","replacement":"{}","statusReason":"Cannot read properties of undefined (reading 'push')","status":"Killed","static":false,"testsCompleted":1,"killedBy":["40"],"coveredBy":["40","41","49","50","51","52"],"location":{"end":{"column":6,"line":16},"start":{"column":45,"line":14}}},{"id":"80","mutatorName":"ConditionalExpression","replacement":"true","statusReason":"18 == 20","status":"Killed","static":false,"testsCompleted":2,"killedBy":["41"],"coveredBy":["40","41","49","50","51","52"],"location":{"end":{"column":43,"line":14},"start":{"column":9,"line":14}}},{"id":"83","mutatorName":"ArrayDeclaration","replacement":"[\"Stryker was here\"]","statusReason":"NaN == 20","status":"Killed","static":false,"testsCompleted":2,"killedBy":["41"],"coveredBy":["40","41","49","50","51","52"],"location":{"end":{"column":45,"line":15},"start":{"column":43,"line":15}}},{"id":"84","mutatorName":"BlockStatement","replacement":"{}","statusReason":"undefined == 22","status":"Killed","static":false,"testsCompleted":1,"killedBy":["40"],"coveredBy":["40"],"location":{"end":{"column":4,"line":22},"start":{"column":28,"line":20}}},{"id":"85","mutatorName":"BlockStatement","replacement":"{}","statusReason":"undefined == 'Rainy'","status":"Killed","static":false,"testsCompleted":1,"killedBy":["40"],"coveredBy":["40"],"location":{"end":{"column":4,"line":26},"start":{"column":26,"line":24}}},{"id":"87","mutatorName":"BooleanLiteral","replacement":"temperatures","statusReason":"null == 20","status":"Killed","static":false,"testsCompleted":1,"killedBy":["41"],"coveredBy":["41","48","49","50","51","52"],"location":{"end":{"column":22,"line":31},"start":{"column":9,"line":31}}},{"id":"86","mutatorName":"BlockStatement","replacement":"{}","statusReason":"undefined == 20","status":"Killed","static":false,"testsCompleted":1,"killedBy":["41"],"coveredBy":["41","48","49","50","51","52"],"location":{"end":{"column":4,"line":37},"start":{"column":35,"line":28}}},{"id":"89","mutatorName":"ConditionalExpression","replacement":"false","statusReason":"Cannot read properties of undefined (reading 'reduce')","status":"Killed","static":false,"testsCompleted":2,"killedBy":["48"],"coveredBy":["41","48","49","50","51","52"],"location":{"end":{"column":22,"line":31},"start":{"column":9,"line":31}}},{"id":"88","mutatorName":"ConditionalExpression","replacement":"true","statusReason":"null == 20","status":"Killed","static":false,"testsCompleted":1,"killedBy":["41"],"coveredBy":["41","48","49","50","51","52"],"location":{"end":{"column":22,"line":31},"start":{"column":9,"line":31}}},{"id":"91","mutatorName":"ArrowFunction","replacement":"() => undefined","statusReason":"NaN == 20","status":"Killed","static":false,"testsCompleted":1,"killedBy":["41"],"coveredBy":["41","49","50","51","52"],"location":{"end":{"column":76,"line":35},"start":{"column":37,"line":35}}},{"id":"90","mutatorName":"BlockStatement","replacement":"{}","statusReason":"Cannot read properties of undefined (reading 'reduce')","status":"Killed","static":false,"testsCompleted":1,"killedBy":["48"],"coveredBy":["48"],"location":{"end":{"column":6,"line":33},"start":{"column":24,"line":31}}},{"id":"92","mutatorName":"ArithmeticOperator","replacement":"acc - temperature","statusReason":"-20 == 20","status":"Killed","static":false,"testsCompleted":1,"killedBy":["41"],"coveredBy":["41","49","50","51","52"],"location":{"end":{"column":76,"line":35},"start":{"column":59,"line":35}}},{"id":"93","mutatorName":"ArithmeticOperator","replacement":"sum * temperatures.length","statusReason":"180 == 20","status":"Killed","static":false,"testsCompleted":1,"killedBy":["41"],"coveredBy":["41","49","50","51","52"],"location":{"end":{"column":37,"line":36},"start":{"column":12,"line":36}}}],"source":"// weather.js\n\nclass WeatherService {\n  constructor() {\n    this.weatherData = {};\n    this.temperatureHistory = {};\n  }\n\n  updateWeatherData(location, temperature, condition) {\n    // Update current weather data\n    this.weatherData[location] = { temperature, condition };\n\n    // Update temperature history\n    if (!this.temperatureHistory[location]) {\n      this.temperatureHistory[location] = [];\n    }\n    this.temperatureHistory[location].push(temperature);\n  }\n\n  getTemperature(location) {\n    return this.weatherData[location] ? this.weatherData[location].temperature : null;\n  }\n\n  getCondition(location) {\n    return this.weatherData[location] ? this.weatherData[location].condition : null;\n  }\n\n  getAverageTemperature(location) {\n    const temperatures = this.temperatureHistory[location];\n  \n    if (!temperatures) {\n      return null; // No temperature data available\n    }\n  \n    const sum = temperatures.reduce((acc, temperature) => acc + temperature, 0);\n    return sum / temperatures.length;\n  }  \n}\n\nmodule.exports = WeatherService;\n"}},"schemaVersion":"1.0","thresholds":{"high":80,"low":60,"break":null},"testFiles":{"test/animal.test.js":{"tests":[{"id":"0","name":"Mutation Integration Testing should create an Animal and make a generic sound"},{"id":"1","name":"Mutation Integration Testing should create a Cat, make a meow sound, and introduce itself"}],"source":"const { expect } = require(\"chai\");\nconst Animal = require(\"../core/animal\");\nconst Cat = require(\"../core/cat\");\n\ndescribe(\"Mutation Integration Testing\", () => {\n  it(\"should create an Animal and make a generic sound\", () => {\n    const animal = new Animal(\"Generic Animal\");\n    expect(animal.makeSound()).to.equal(\"Generic animal sound\");\n  });\n\n  it(\"should create a Cat, make a meow sound, and introduce itself\", () => {\n    const cat = new Cat(\"Whiskers\", \"Tabby\");\n    expect(cat.makeSound()).to.equal(\"Meow\");\n    expect(cat.introduce()).to.equal(\"I am a Tabby cat named Whiskers\");\n  });\n\n  // Additional tests as needed\n});\n"},"test/auth.test.js":{"tests":[{"id":"2","name":"Unit Test - Authentication Operations should register a new user"},{"id":"3","name":"Unit Test - Authentication Operations should throw an error with a specific message when registering a duplicate username"},{"id":"4","name":"Unit Test - Authentication Operations should log in a registered user with correct credentials"},{"id":"5","name":"Unit Test - Authentication Operations should not log in with incorrect credentials"},{"id":"6","name":"Unit Test - Authentication Operations should not log in without registering a user"},{"id":"7","name":"Unit Test - Authentication Operations should log out a logged-in user"},{"id":"8","name":"Unit Test - Authentication Operations should check authentication status for a non-logged-in user"},{"id":"9","name":"Unit Test - Authentication Operations should not log out if no user is logged in"},{"id":"10","name":"Unit Test - Authentication Operations should not log in without providing a password"},{"id":"11","name":"Unit Test - Authentication Operations should not log in with incorrect username"},{"id":"12","name":"Unit Test - Authentication Operations should not log in with incorrect password"}],"source":"// auth.test.js\n\nconst assert = require('assert');\nconst Auth = require('../core/auth');\n\ndescribe('Unit Test - Authentication Operations', () => {\n  it('should register a new user', () => {\n    const auth = new Auth();\n    auth.registerUser('user1', 'password123');\n\n    assert.deepStrictEqual(auth.users, [{ username: 'user1', password: 'password123' }]);\n  });\n\n  it('should throw an error with a specific message when registering a duplicate username', () => {\n    const auth = new Auth();\n    auth.registerUser('user1', 'password123');\n\n    try {\n      auth.registerUser('user1', 'anotherPassword');\n      // If the registration succeeds, it means the mutation has occurred.\n      assert.fail('Expected an error to be thrown for duplicate username');\n    } catch (error) {\n      assert.equal(error.message, 'Username already exists');\n    }\n  });\n  it('should log in a registered user with correct credentials', () => {\n    const auth = new Auth();\n    auth.registerUser('user1', 'password123');\n    const isLoggedIn = auth.loginUser('user1', 'password123');\n\n    assert.equal(isLoggedIn, true);\n    assert.equal(auth.isAuthenticated(), true);\n  });\n\n  it('should not log in with incorrect credentials', () => {\n    const auth = new Auth();\n    auth.registerUser('user1', 'password123');\n    const isLoggedIn = auth.loginUser('user1', 'wrongPassword');\n\n    assert.equal(isLoggedIn, false);\n    assert.equal(auth.isAuthenticated(), false);\n  });\n\n  it('should not log in without registering a user', () => {\n    const auth = new Auth();\n    const isLoggedIn = auth.loginUser('nonExistentUser', 'password123');\n\n    assert.equal(isLoggedIn, false);\n    assert.equal(auth.isAuthenticated(), false);\n  });\n\n  it('should log out a logged-in user', () => {\n    const auth = new Auth();\n    auth.registerUser('user1', 'password123');\n    auth.loginUser('user1', 'password123');\n    auth.logoutUser();\n\n    assert.equal(auth.isAuthenticated(), false);\n  });\n\n  it('should check authentication status for a non-logged-in user', () => {\n    const auth = new Auth();\n    assert.equal(auth.isAuthenticated(), false);\n  });\n\n  it('should not log out if no user is logged in', () => {\n    const auth = new Auth();\n\n    // Attempting to log out without a prior login\n    auth.logoutUser();\n\n    // Ensure that no error occurs and the authentication status remains false\n    assert.equal(auth.isAuthenticated(), false);\n  });\n\n  it('should not log in without providing a password', () => {\n    const auth = new Auth();\n    auth.registerUser('user1', 'password123');\n\n    auth.loginUser('user1', '');\n\n    // Ensure that no user is logged in and the authentication status remains false\n    assert.equal(auth.isAuthenticated(), false);\n  });\n\n  // Additional test cases for mutation coverage\n  it('should not log in with incorrect username', () => {\n    const auth = new Auth();\n    auth.registerUser('user1', 'password123');\n    const isLoggedIn = auth.loginUser('wrongUser', 'password123');\n\n    assert.equal(isLoggedIn, false);\n    assert.equal(auth.isAuthenticated(), false);\n  });\n\n  it('should not log in with incorrect password', () => {\n    const auth = new Auth();\n    auth.registerUser('user1', 'password123');\n    const isLoggedIn = auth.loginUser('user1', 'wrongPassword');\n\n    assert.equal(isLoggedIn, false);\n    assert.equal(auth.isAuthenticated(), false);\n  });\n\n  // Add more unit tests as needed\n});\n"},"test/calculator.test.js":{"tests":[{"id":"13","name":"Unit Test - Calculator should add two numbers"},{"id":"14","name":"Unit Test - Calculator should subtract two numbers"},{"id":"15","name":"Unit Test - Calculator should multiply two numbers"},{"id":"16","name":"Unit Test - Calculator should divide two numbers"},{"id":"17","name":"Unit Test - Calculator should handle division by zero"},{"id":"18","name":"Unit Test - Calculator should calculate the square of a number"},{"id":"19","name":"Unit Test - Calculator should calculate the power of a number"},{"id":"20","name":"Unit Test - Calculator should handle power with negative exponent"},{"id":"21","name":"Unit Test - Calculator should handle addition with negative numbers"},{"id":"22","name":"Unit Test - Calculator should handle subtraction with negative result"}],"source":"// calculator.test.js\n\nconst assert = require('assert');\nconst calculator = require('../core/calculator');\n\ndescribe('Unit Test - Calculator', () => {\n  it('should add two numbers', () => {\n    assert.equal(calculator.add(3, 5), 8);\n  });\n\n  it('should subtract two numbers', () => {\n    assert.equal(calculator.subtract(8, 3), 5);\n  });\n\n  it('should multiply two numbers', () => {\n    assert.equal(calculator.multiply(2, 4), 8);\n  });\n\n  it('should divide two numbers', () => {\n    assert.equal(calculator.divide(8, 2), 4);\n  });\n\n  it('should handle division by zero', () => {\n    assert.throws(() => calculator.divide(8, 0), /Cannot divide by zero/);\n  });\n\n  it('should calculate the square of a number', () => {\n    assert.equal(calculator.square(4), 16);\n  });\n\n  it('should calculate the power of a number', () => {\n    assert.equal(calculator.power(2, 3), 8);\n  });\n\n  it('should handle power with negative exponent', () => {\n    assert.equal(calculator.power(2, -2), 0.25);\n  });\n\n  // Additional test cases for mutation coverage\n  it('should handle addition with negative numbers', () => {\n    assert.equal(calculator.add(-3, 5), 2);\n  });\n\n  it('should handle subtraction with negative result', () => {\n    assert.equal(calculator.subtract(3, 5), -2);\n  });\n\n  // Add more unit tests as needed\n});\n"},"test/cart.test.js":{"tests":[{"id":"23","name":"Unit Test - Shopping Cart should handle removing an existing item from the cart"},{"id":"24","name":"Unit Test - Shopping Cart should handle removing the last item from the cart"},{"id":"25","name":"Unit Test - Shopping Cart should not modify the cart if the item to remove is not present"},{"id":"26","name":"Unit Test - Shopping Cart should handle removing an item with a negative price"},{"id":"27","name":"Unit Test - Shopping Cart should handle removing an item with index not equal to -1"},{"id":"28","name":"Unit Test - Shopping Cart should handle removing an item with index not equal to +1"}],"source":"// cart.test.js\n\nconst assert = require('assert');\nconst ShoppingCart = require('../core/cart');\n\ndescribe('Unit Test - Shopping Cart', () => {\n  // ... (existing test cases)\n\n  it('should handle removing an existing item from the cart', () => {\n    const cart = new ShoppingCart();\n    const item1 = { name: 'Product 1', price: 20 };\n    const item2 = { name: 'Product 2', price: 30 };\n\n    cart.addItem(item1);\n    cart.addItem(item2);\n    cart.removeItem(item1);\n\n    assert.deepStrictEqual(cart.items, [item2]);\n  });\n\n  it('should handle removing the last item from the cart', () => {\n    const cart = new ShoppingCart();\n    const item = { name: 'Product', price: 25 };\n\n    cart.addItem(item);\n    cart.removeItem(item);\n\n    assert.deepStrictEqual(cart.items, []);\n  });\n\n  it('should not modify the cart if the item to remove is not present', () => {\n    const cart = new ShoppingCart();\n    const item1 = { name: 'Product 1', price: 20 };\n    const item2 = { name: 'Product 2', price: 30 };\n\n    cart.addItem(item1);\n    cart.removeItem(item2);\n\n    assert.deepStrictEqual(cart.items, [item1]);\n  });\n\n  it('should handle removing an item with a negative price', () => {\n    const cart = new ShoppingCart();\n    const item = { name: 'Negative Product', price: -10 };\n\n    cart.addItem(item);\n    cart.removeItem(item);\n\n    assert.deepStrictEqual(cart.items, []);\n  });\n\n  // Updated test cases for mutation coverage\n  it('should handle removing an item with index not equal to -1', () => {\n    const cart = new ShoppingCart();\n    const item1 = { name: 'Product 1', price: 20 };\n    const item2 = { name: 'Product 2', price: 30 };\n\n    cart.addItem(item1);\n    cart.addItem(item2);\n\n    cart.removeItem(item1);\n\n    assert.deepStrictEqual(cart.items, [item2]);\n  });\n\n  it('should handle removing an item with index not equal to +1', () => {\n    const cart = new ShoppingCart();\n    const item1 = { name: 'Product 1', price: 20 };\n    const item2 = { name: 'Product 2', price: 30 };\n\n    cart.addItem(item1);\n    cart.addItem(item2);\n\n    cart.removeItem(item1);\n\n    assert.deepStrictEqual(cart.items, [item2]);\n  });\n\n  // Add more unit tests as needed\n});\n"},"test/integrationAuth.test.js":{"tests":[{"id":"29","name":"Integration Test - Authentication Operations should register a new user, log in, and check authentication status"},{"id":"30","name":"Integration Test - Authentication Operations should register multiple users and handle login/logout for different users"},{"id":"31","name":"Integration Test - Authentication Operations should handle authentication status when no user is logged in"},{"id":"32","name":"Integration Test - Authentication Operations should handle authentication status after registering but without logging in"},{"id":"33","name":"Integration Test - Authentication Operations should not log in without providing a password"}],"source":"// integrationAuth.test.js\n\nconst assert = require('assert');\nconst Auth = require('../core/auth');\n\ndescribe('Integration Test - Authentication Operations', () => {\n  it('should register a new user, log in, and check authentication status', () => {\n    const auth = new Auth();\n    auth.registerUser('user1', 'password123');\n    auth.loginUser('user1', 'password123');\n\n    const result = {\n      registeredUsers: auth.users,\n      isAuthenticated: auth.isAuthenticated(),\n    };\n\n    assert.deepStrictEqual(result, {\n      registeredUsers: [{ username: 'user1', password: 'password123' }],\n      isAuthenticated: true,\n    });\n  });\n\n  it('should register multiple users and handle login/logout for different users', () => {\n    const auth = new Auth();\n    auth.registerUser('user1', 'password123');\n    auth.registerUser('user2', 'secure456');\n\n    auth.loginUser('user1', 'password123');\n    const result1 = {\n      currentUser: auth.currentUser,\n      isAuthenticated: auth.isAuthenticated(),\n    };\n    assert.deepStrictEqual(result1, { currentUser: 'user1', isAuthenticated: true });\n\n    auth.logoutUser();\n    const result2 = {\n      currentUser: auth.currentUser,\n      isAuthenticated: auth.isAuthenticated(),\n    };\n    assert.deepStrictEqual(result2, { currentUser: null, isAuthenticated: false });\n\n    auth.loginUser('user2', 'secure456');\n    const result3 = {\n      currentUser: auth.currentUser,\n      isAuthenticated: auth.isAuthenticated(),\n    };\n    assert.deepStrictEqual(result3, { currentUser: 'user2', isAuthenticated: true });\n  });\n\n  it('should handle authentication status when no user is logged in', () => {\n    const auth = new Auth();\n    const result = {\n      currentUser: auth.currentUser,\n      isAuthenticated: auth.isAuthenticated(),\n    };\n    assert.deepStrictEqual(result, { currentUser: null, isAuthenticated: false });\n  });\n\n  it('should handle authentication status after registering but without logging in', () => {\n    const auth = new Auth();\n    auth.registerUser('user1', 'password123');\n\n    const result = {\n      currentUser: auth.currentUser,\n      isAuthenticated: auth.isAuthenticated(),\n    };\n    assert.deepStrictEqual(result, { currentUser: null, isAuthenticated: false });\n  });\n\n  it('should not log in without providing a password', () => {\n    const auth = new Auth();\n    auth.registerUser('user1', 'password123');\n\n    auth.loginUser('user1', '');\n\n    // Ensure that no user is logged in and the authentication status remains false\n    const result = {\n      currentUser: auth.currentUser,\n      isAuthenticated: auth.isAuthenticated(),\n    };\n    assert.deepStrictEqual(result, { currentUser: null, isAuthenticated: false });\n  });\n\n  // Additional integration test cases for mutation coverage\n  // Add more integration tests as needed\n});\n"},"test/integrationCalculator.test.js":{"tests":[{"id":"34","name":"Integration Test - Calculator should correctly perform multiple operations"},{"id":"35","name":"Integration Test - Calculator should handle integration scenario with negative numbers"}],"source":"// integration.test.js\n\nconst assert = require('assert');\nconst calculator = require('../core/calculator');\n\ndescribe('Integration Test - Calculator', () => {\n  it('should correctly perform multiple operations', () => {\n    const result = calculator.performMultipleOperations(3, 5, 2, 4);\n\n    // Assuming performMultipleOperations internally calls add, subtract, multiply, square\n    assert.equal(result, 256);\n  });\n\n  it('should handle integration scenario with negative numbers', () => {\n    const result = calculator.performMultipleOperations(-3, 5, -2, 4);\n\n    // Assuming performMultipleOperations internally calls add, subtract, multiply, square\n    assert.equal(result, 144);\n  });\n\n  // Additional integration test cases for mutation coverage\n\n  // Add more integration tests as needed\n});\n"},"test/integrationCart.test.js":{"tests":[{"id":"36","name":"Integration Test - Shopping Cart Operations should add and remove items, and calculate total price"},{"id":"37","name":"Integration Test - Shopping Cart Operations should handle integration with an empty cart"}],"source":"// integrationCart.test.js\n\nconst assert = require('assert');\nconst ShoppingCart = require('../core/cart');\n\ndescribe('Integration Test - Shopping Cart Operations', () => {\n  it('should add and remove items, and calculate total price', () => {\n    const cart = new ShoppingCart();\n    const item1 = { name: 'Product 1', price: 20 };\n    const item2 = { name: 'Product 2', price: 30 };\n\n    cart.addItem(item1);\n    cart.addItem(item2);\n    cart.removeItem(item1);\n\n    const result = {\n      items: cart.items,\n      total: cart.calculateTotal(),\n    };\n\n    assert.deepStrictEqual(result, { items: [item2], total: 30 });\n  });\n\n  it('should handle integration with an empty cart', () => {\n    const cart = new ShoppingCart();\n\n    const result = {\n      items: cart.items,\n      total: cart.calculateTotal(),\n    };\n\n    assert.deepStrictEqual(result, { items: [], total: 0 });\n  });\n\n  // Additional integration test cases for mutation coverage\n  // Add more integration tests as needed\n});\n"},"test/integrationString.test.js":{"tests":[{"id":"38","name":"Integration Test - String Operations should handle integration with concatenated and uppercase strings"},{"id":"39","name":"Integration Test - String Operations should handle integration with empty strings"}],"source":"// integrationString.test.js\n\nconst assert = require('assert');\nconst stringOperations = require('../core/stringOperations');\n\ndescribe('Integration Test - String Operations', () => {\n  it('should handle integration with concatenated and uppercase strings', () => {\n    const result = {\n      concatenated: stringOperations.concatenateStrings('Hello', 'World'),\n      length: stringOperations.getStringLength('TestString'),\n      uppercase: stringOperations.convertToUppercase('integration'),\n    };\n\n    assert.deepStrictEqual(result, {\n      concatenated: 'HelloWorld',\n      length: 10,\n      uppercase: 'INTEGRATION',\n    });\n  });\n\n  it('should handle integration with empty strings', () => {\n    const result = {\n      concatenated: stringOperations.concatenateStrings('', ''),\n      length: stringOperations.getStringLength(''),\n      uppercase: stringOperations.convertToUppercase(''),\n    };\n\n    assert.deepStrictEqual(result, {\n      concatenated: '',\n      length: 0,\n      uppercase: '',\n    });\n  });\n\n  // Additional integration test cases for mutation coverage\n  // Add more integration tests as needed\n});\n"},"test/integrationWeather.test.js":{"tests":[{"id":"40","name":"Integration Test - Weather Service should update and retrieve weather data for a location"},{"id":"41","name":"Integration Test - Weather Service should handle getting average temperature for a location in integration test"}],"source":"// integrationWeather.test.js\n\nconst assert = require('assert');\nconst WeatherService = require('../core/weather');\n\ndescribe('Integration Test - Weather Service', () => {\n  // Existing integration test cases\n\n  it('should update and retrieve weather data for a location', () => {\n    const weatherService = new WeatherService();\n    weatherService.updateWeatherData('Tokyo', 22, 'Rainy');\n    \n    const temperature = weatherService.getTemperature('Tokyo');\n    const condition = weatherService.getCondition('Tokyo');\n\n    assert.equal(temperature, 22);\n    assert.equal(condition, 'Rainy');\n  });\n\n  it('should handle getting average temperature for a location in integration test', () => {\n    const weatherService = new WeatherService();\n    weatherService.updateWeatherData('Berlin', 20, 'Clear');\n    weatherService.updateWeatherData('Berlin', 22, 'Clear');\n    weatherService.updateWeatherData('Berlin', 18, 'Cloudy');\n    \n    const averageTemperature = weatherService.getAverageTemperature('Berlin');\n    assert.equal(averageTemperature, (20 + 22 + 18) / 3);\n  });\n\n  // Add more integration test cases as needed\n});\n"},"test/stringOperartions.test.js":{"tests":[{"id":"42","name":"Unit Test - String Operations should concatenate two strings"},{"id":"43","name":"Unit Test - String Operations should get the length of a string"},{"id":"44","name":"Unit Test - String Operations should convert a string to uppercase"},{"id":"45","name":"Unit Test - String Operations should handle concatenation with an empty string"},{"id":"46","name":"Unit Test - String Operations should handle getting the length of an empty string"},{"id":"47","name":"Unit Test - String Operations should handle converting an already uppercase string"}],"source":"// stringOperations.test.js\n\nconst assert = require('assert');\nconst stringOperations = require('../core/stringOperations');\n\ndescribe('Unit Test - String Operations', () => {\n  it('should concatenate two strings', () => {\n    assert.equal(stringOperations.concatenateStrings('Hello', 'World'), 'HelloWorld');\n  });\n\n  it('should get the length of a string', () => {\n    assert.equal(stringOperations.getStringLength('TestString'), 10);\n  });\n\n  it('should convert a string to uppercase', () => {\n    assert.equal(stringOperations.convertToUppercase('uppercase'), 'UPPERCASE');\n  });\n\n  // Additional test cases for mutation coverage\n  it('should handle concatenation with an empty string', () => {\n    assert.equal(stringOperations.concatenateStrings('Hello', ''), 'Hello');\n  });\n\n  it('should handle getting the length of an empty string', () => {\n    assert.equal(stringOperations.getStringLength(''), 0);\n  });\n\n  it('should handle converting an already uppercase string', () => {\n    assert.equal(stringOperations.convertToUppercase('UPPERCASE'), 'UPPERCASE');\n  });\n\n  // Add more unit tests as needed\n});\n"},"test/weather.test.js":{"tests":[{"id":"48","name":"Unit Test - Weather Service should handle getting average temperature for a location with no temperature history (mutant-killing case 1)"},{"id":"49","name":"Unit Test - Weather Service should handle getting average temperature for a location with one temperature (mutant-killing case 2)"},{"id":"50","name":"Unit Test - Weather Service should handle getting average temperature for a location with multiple temperatures (mutant-killing case 3)"},{"id":"51","name":"Unit Test - Weather Service should handle getting average temperature for a location with one temperature (mutant-killing case 4)"},{"id":"52","name":"Unit Test - Weather Service should handle getting average temperature for a location with multiple temperatures (mutant-killing case 5)"}],"source":"// weather.test.js\n\nconst assert = require('assert');\nconst WeatherService = require('../core/weather');\n\ndescribe('Unit Test - Weather Service', () => {\n  // Existing test cases\n\n  it('should handle getting average temperature for a location with no temperature history (mutant-killing case 1)', () => {\n    const weatherService = new WeatherService();\n    const averageTemperature = weatherService.getAverageTemperature('NewCity');\n    assert.equal(averageTemperature, null);\n  });\n\n  it('should handle getting average temperature for a location with one temperature (mutant-killing case 2)', () => {\n    const weatherService = new WeatherService();\n    weatherService.updateWeatherData('Rome', 28, 'Sunny');\n    const averageTemperature = weatherService.getAverageTemperature('Rome');\n    assert.equal(averageTemperature, 28);\n  });\n\n  it('should handle getting average temperature for a location with multiple temperatures (mutant-killing case 3)', () => {\n    const weatherService = new WeatherService();\n    weatherService.updateWeatherData('Amsterdam', 16, 'Rainy');\n    weatherService.updateWeatherData('Amsterdam', 14, 'Cloudy');\n    weatherService.updateWeatherData('Amsterdam', 18, 'Clear');\n    \n    const averageTemperature = weatherService.getAverageTemperature('Amsterdam');\n    assert.equal(averageTemperature, (16 + 14 + 18) / 3);\n  });\n\n  it('should handle getting average temperature for a location with no temperature history (mutant-killing case 1)', () => {\n    const weatherService = new WeatherService();\n    const averageTemperature = weatherService.getAverageTemperature('NewCity');\n    assert.equal(averageTemperature, null);\n  });\n\n  it('should handle getting average temperature for a location with one temperature (mutant-killing case 2)', () => {\n    const weatherService = new WeatherService();\n    weatherService.updateWeatherData('Rome', 28, 'Sunny');\n    const averageTemperature = weatherService.getAverageTemperature('Rome');\n    assert.equal(averageTemperature, 28);\n  });\n\n  it('should handle getting average temperature for a location with multiple temperatures (mutant-killing case 3)', () => {\n    const weatherService = new WeatherService();\n    weatherService.updateWeatherData('Amsterdam', 16, 'Rainy');\n    weatherService.updateWeatherData('Amsterdam', 14, 'Cloudy');\n    weatherService.updateWeatherData('Amsterdam', 18, 'Clear');\n    \n    const averageTemperature = weatherService.getAverageTemperature('Amsterdam');\n    assert.equal(averageTemperature, (16 + 14 + 18) / 3);\n  });\n\n  // New test cases to kill the identified mutants\n  it('should handle getting average temperature for a location with one temperature (mutant-killing case 4)', () => {\n    const weatherService = new WeatherService();\n    weatherService.updateWeatherData('Paris', 25, 'Sunny');\n    const averageTemperature = weatherService.getAverageTemperature('Paris');\n    assert.equal(averageTemperature, 25);\n  });\n\n  it('should handle getting average temperature for a location with multiple temperatures (mutant-killing case 5)', () => {\n    const weatherService = new WeatherService();\n    weatherService.updateWeatherData('London', 20, 'Cloudy');\n    weatherService.updateWeatherData('London', 22, 'Clear');\n    weatherService.updateWeatherData('London', 18, 'Rainy');\n    \n    const averageTemperature = weatherService.getAverageTemperature('London');\n    assert.equal(averageTemperature, (20 + 22 + 18) / 3);\n  });\n\n  // Add the rest of your test cases\n});\n"}},"projectRoot":"/home/prateek/Desktop/Software testing project/White box testing","config":{"testRunner":"mocha","reporters":["clear-text","progress","html","event-recorder"],"packageManager":"npm","coverageAnalysis":"perTest","mutate":["core/**/*.js"],"thresholds":{"high":80,"low":60,"break":null},"allowConsoleColors":true,"checkers":[],"checkerNodeArgs":[],"commandRunner":{"command":"npm test"},"clearTextReporter":{"allowColor":true,"allowEmojis":false,"logTests":true,"maxTestsToLog":3,"reportTests":true,"reportMutants":true,"reportScoreTable":true},"dashboard":{"baseUrl":"https://dashboard.stryker-mutator.io/api/reports","reportType":"full"},"dryRunOnly":false,"eventReporter":{"baseDir":"reports/mutation/events"},"ignorePatterns":[],"ignoreStatic":false,"incremental":false,"incrementalFile":"reports/stryker-incremental.json","force":false,"fileLogLevel":"off","inPlace":false,"logLevel":"info","maxConcurrentTestRunners":9007199254740991,"maxTestRunnerReuse":0,"mutator":{"plugins":null,"excludedMutations":[]},"plugins":["@stryker-mutator/*"],"appendPlugins":[],"htmlReporter":{"fileName":"reports/mutation/mutation.html"},"jsonReporter":{"fileName":"reports/mutation/mutation.json"},"disableTypeChecks":true,"symlinkNodeModules":true,"tempDirName":".stryker-tmp","cleanTempDir":true,"testRunnerNodeArgs":[],"timeoutFactor":1.5,"timeoutMS":5000,"dryRunTimeoutMinutes":5,"tsconfigFile":"tsconfig.json","warnings":true,"disableBail":false,"allowEmpty":false,"ignorers":[],"mochaOptions":{}},"framework":{"name":"StrykerJS","version":"7.3.0","branding":{"homepageUrl":"https://stryker-mutator.io","imageUrl":"data:image/svg+xml;utf8,%3Csvg viewBox='0 0 1458 1458' xmlns='http://www.w3.org/2000/svg' fill-rule='evenodd' clip-rule='evenodd' stroke-linejoin='round' stroke-miterlimit='2'%3E%3Cpath fill='none' d='M0 0h1458v1458H0z'/%3E%3CclipPath id='a'%3E%3Cpath d='M0 0h1458v1458H0z'/%3E%3C/clipPath%3E%3Cg clip-path='url(%23a)'%3E%3Cpath d='M1458 729c0 402.655-326.345 729-729 729S0 1131.655 0 729C0 326.445 326.345 0 729 0s729 326.345 729 729' fill='%23e74c3c' fill-rule='nonzero'/%3E%3Cpath d='M778.349 1456.15L576.6 1254.401l233-105 85-78.668v-64.332l-257-257-44-187-50-208 251.806-82.793L1076.6 389.401l380.14 379.15c-19.681 367.728-311.914 663.049-678.391 687.599z' fill-opacity='.3'/%3E%3Cpath d='M753.4 329.503c41.79 0 74.579 7.83 97.925 25.444 23.571 18.015 41.69 43.956 55.167 77.097l11.662 28.679 165.733-58.183-14.137-32.13c-26.688-60.655-64.896-108.61-114.191-144.011-49.329-35.423-117.458-54.302-204.859-54.302-50.78 0-95.646 7.376-134.767 21.542-40.093 14.671-74.09 34.79-102.239 60.259-28.84 26.207-50.646 57.06-65.496 92.701-14.718 35.052-22.101 72.538-22.101 112.401 0 72.536 20.667 133.294 61.165 182.704 38.624 47.255 98.346 88.037 179.861 121.291 42.257 17.475 78.715 33.125 109.227 46.994 27.193 12.361 49.294 26.124 66.157 41.751 15.309 14.186 26.497 30.584 33.63 49.258 7.721 20.214 11.16 45.69 11.16 76.402 0 28.021-4.251 51.787-13.591 71.219-8.832 18.374-20.171 33.178-34.523 44.219-14.787 11.374-31.193 19.591-49.393 24.466-19.68 5.359-39.14 7.993-58.69 7.993-29.359 0-54.387-3.407-75.182-10.747-20.112-7.013-37.144-16.144-51.259-27.486-13.618-11.009-24.971-23.766-33.744-38.279-9.64-15.8-17.272-31.924-23.032-48.408l-10.965-31.376-161.669 60.585 10.734 30.124c10.191 28.601 24.197 56.228 42.059 82.748 18.208 27.144 41.322 51.369 69.525 72.745 27.695 21.075 60.904 38.218 99.481 51.041 37.777 12.664 82.004 19.159 132.552 19.159 49.998 0 95.818-8.321 137.611-24.622 42.228-16.471 78.436-38.992 108.835-67.291 30.719-28.597 54.631-62.103 71.834-100.642 17.263-38.56 25.923-79.392 25.923-122.248 0-54.339-8.368-100.37-24.208-138.32-16.29-38.759-38.252-71.661-65.948-98.797-26.965-26.418-58.269-48.835-93.858-67.175-33.655-17.241-69.196-33.11-106.593-47.533-35.934-13.429-65.822-26.601-89.948-39.525-22.153-11.868-40.009-24.21-53.547-37.309-11.429-11.13-19.83-23.678-24.718-37.664-5.413-15.49-7.98-33.423-7.98-53.577 0-40.883 11.293-71.522 37.086-90.539 28.443-20.825 64.985-30.658 109.311-30.658z' fill='%23f1c40f' fill-rule='nonzero'/%3E%3Cpath d='M720 0h18v113h-18zM1458 738v-18h-113v18h113zM720 1345h18v113h-18zM113 738v-18H0v18h113z'/%3E%3C/g%3E%3C/svg%3E"},"dependencies":{"@stryker-mutator/mocha-runner":"7.3.0","mocha":"10.2.0"}}}